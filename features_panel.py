"""
All Features Panel - UI —ç–∫—Ä–∞–Ω –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å –Ω–µ–æ–Ω–æ–≤–æ–π —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
"""

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.graphics import Color, RoundedRectangle, Ellipse, Line
from kivy.animation import Animation
from kivy.properties import BooleanProperty, StringProperty, NumericProperty
from kivy.core.window import Window

# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –¶–í–ï–¢–û–í –ò –†–ê–ó–ú–ï–†–û–í
# ============================================================================

# –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
COLOR_BG_DARK = (0.067, 0.067, 0.067, 1)  # #111111
COLOR_BG_CARD = (0.102, 0.102, 0.102, 1)  # #1A1A1A
COLOR_BG_CHIP = (0.13, 0.13, 0.15, 1)     # #212123

# –ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
COLOR_NEON_PRIMARY = (0.6, 0.4, 1.0, 1)    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
COLOR_NEON_SECONDARY = (0.4, 0.6, 1.0, 1)  # –°–∏–Ω–∏–π
COLOR_NEON_GLOW = (0.5, 0.5, 1.0, 0.3)     # –°–≤–µ—á–µ–Ω–∏–µ

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
COLOR_TEXT_PRIMARY = (1, 1, 1, 1)
COLOR_TEXT_SECONDARY = (0.8, 0.8, 0.85, 1)

# –†–∞–∑–º–µ—Ä—ã
CHIP_HEIGHT = 52
CHIP_RADIUS = 26
ICON_SIZE = 24
ICON_CIRCLE_SIZE = 32
GRID_SPACING = 12
PADDING_HORIZONTAL = 20
PADDING_TOP = 60
PADDING_BOTTOM = 40

# –ê–Ω–∏–º–∞—Ü–∏—è
ANIM_DURATION = 0.25
PRESS_SCALE = 0.98


# ============================================================================
# –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–ê–ü–°–£–õ–¨-–ö–ù–û–ü–ö–ò
# ============================================================================

class FeatureChip(BoxLayout):
    """–ö–∞–ø—Å—É–ª—å-–∫–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º"""
    
    icon_name = StringProperty('')
    label_text = StringProperty('')
    active = BooleanProperty(False)
    press_opacity = NumericProperty(1.0)
    
    # –≠–º–æ–¥–∑–∏-–∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    ICON_EMOJI_MAP = {
        'translate': 'üåê',
        'correct': '‚úì',
        'emojify': 'üòä',
        'expand': '‚Üî',
        'reply': 'üí¨',
        'dialog_goal': 'üéØ',
        'compress': '‚áÑ',
        'paraphrase': '‚ôª',
        'format': 'üìù',
        'scan': 'üîç',
        'tone': 'üéµ',
        'settings': '‚öô',
    }
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = 'horizontal'
        self.spacing = 12
        self.padding = [16, 0, 16, 0]
        self.size_hint = (1, None)
        self.height = CHIP_HEIGHT
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∏
        with self.canvas.before:
            # –§–æ–Ω –∫–∞–ø—Å—É–ª–∏
            self.bg_color = Color(*COLOR_BG_CHIP)
            self.bg_rect = RoundedRectangle(
                pos=self.pos,
                size=self.size,
                radius=[CHIP_RADIUS]
            )
            
            # –°–≤–µ—á–µ–Ω–∏–µ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ)
            self.glow_color = Color(0.5, 0.5, 1.0, 0)
            self.glow_rect = RoundedRectangle(
                pos=(self.x - 2, self.y - 2),
                size=(self.width + 4, self.height + 4),
                radius=[CHIP_RADIUS + 2]
            )
        
        # –ò–∫–æ–Ω–∫–∞ (–∫—Ä—É–≥–ª–∞—è –ø–ª–∞—à–∫–∞ —Å —ç–º–æ–¥–∑–∏)
        icon_layout = FloatLayout(size_hint=(None, 1), width=ICON_CIRCLE_SIZE)
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –∏–∫–æ–Ω–∫–∏
        with icon_layout.canvas.before:
            self.icon_color = Color(*COLOR_NEON_PRIMARY)
            self.icon_circle = Ellipse(
                pos=(self.x + 16, self.y + (CHIP_HEIGHT - ICON_CIRCLE_SIZE) / 2),
                size=(ICON_CIRCLE_SIZE, ICON_CIRCLE_SIZE)
            )
        
        # –≠–º–æ–¥–∑–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª –ø–æ–≤–µ—Ä—Ö –∫—Ä—É–≥–∞
        emoji = self.ICON_EMOJI_MAP.get(self.icon_name, '‚Ä¢')
        self.icon_label = Label(
            text=emoji,
            font_size='16sp',
            size_hint=(1, 1),
            pos_hint={'center_x': 0.5, 'center_y': 0.5}
        )
        icon_layout.add_widget(self.icon_label)
        
        self.add_widget(icon_layout)
        
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        self.text_label = Label(
            text=self.label_text,
            font_size='16sp',
            color=COLOR_TEXT_PRIMARY,
            size_hint=(1, 1)
        )
        self.add_widget(self.text_label)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.bind(pos=self.update_graphics, size=self.update_graphics)
        self.bind(active=self.on_active_change)
        self.bind(press_opacity=self.on_opacity_change)
        
    def update_graphics(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞/–ø–æ–∑–∏—Ü–∏–∏"""
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size
        self.glow_rect.pos = (self.x - 2, self.y - 2)
        self.glow_rect.size = (self.width + 4, self.height + 4)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä—É–≥–∞ –∏–∫–æ–Ω–∫–∏
        if hasattr(self, 'icon_circle'):
            self.icon_circle.pos = (
                self.x + 16,
                self.y + (CHIP_HEIGHT - ICON_CIRCLE_SIZE) / 2
            )
    
    def on_active_change(self, instance, value):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        if value:
            # –í–∫–ª—é—á–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
            anim = Animation(a=0.4, duration=ANIM_DURATION)
            anim.start(self.glow_color)
        else:
            # –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
            anim = Animation(a=0, duration=ANIM_DURATION)
            anim.start(self.glow_color)
    
    def on_opacity_change(self, instance, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏"""
        self.bg_color.a = value
        self.icon_color.a = value
        self.text_label.opacity = value
        self.icon_label.opacity = value
    
    def on_touch_down(self, touch):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è"""
        if self.collide_point(*touch.pos):
            self.active = True
            # –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
            anim_down = Animation(
                press_opacity=0.7,
                duration=ANIM_DURATION / 2
            )
            anim_down.start(self)
            return True
        return super().on_touch_down(touch)
    
    def on_touch_up(self, touch):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è"""
        if self.active:
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            anim_up = Animation(
                press_opacity=1.0,
                duration=ANIM_DURATION
            )
            anim_up.start(self)
            
            # –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            def deactivate(*args):
                self.active = False
            
            anim_up.bind(on_complete=deactivate)
            return True
        return super().on_touch_up(touch)


# ============================================================================
# –ö–ù–û–ü–ö–ê –ó–ê–ö–†–´–¢–ò–Ø
# ============================================================================

class CloseButton(Widget):
    """–ö–Ω–æ–ø–∫–∞ X –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"""
    
    press_opacity = NumericProperty(1.0)
    
    def __init__(self, on_close=None, **kwargs):
        super().__init__(**kwargs)
        self.size_hint = (None, None)
        self.size = (40, 40)
        self.on_close_callback = on_close  # Store close callback
        
        with self.canvas:
            # –§–æ–Ω –∫—Ä—É–≥–ª–æ–π –∫–Ω–æ–ø–∫–∏
            self.bg_color = Color(*COLOR_BG_CHIP)
            self.bg_circle = Ellipse(pos=self.pos, size=self.size)
            
            # –ö—Ä–µ—Å—Ç–∏–∫
            self.x_color = Color(*COLOR_TEXT_SECONDARY)
            # –õ–∏–Ω–∏—è 1: \
            self.line1 = Line(
                points=[
                    self.x + 12, self.y + 12,
                    self.x + 28, self.y + 28
                ],
                width=2
            )
            # –õ–∏–Ω–∏—è 2: /
            self.line2 = Line(
                points=[
                    self.x + 28, self.y + 12,
                    self.x + 12, self.y + 28
                ],
                width=2
            )
        
        self.bind(pos=self.update_graphics, size=self.update_graphics)
        self.bind(press_opacity=self.on_opacity_change)
    
    def update_graphics(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
        self.bg_circle.pos = self.pos
        self.bg_circle.size = self.size
        self.line1.points = [
            self.x + 12, self.y + 12,
            self.x + 28, self.y + 28
        ]
        self.line2.points = [
            self.x + 28, self.y + 12,
            self.x + 12, self.y + 28
        ]
    
    def on_opacity_change(self, instance, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        self.bg_color.a = value
        self.x_color.a = value
    
    def on_touch_down(self, touch):
        """–ù–∞–∂–∞—Ç–∏–µ"""
        if self.collide_point(*touch.pos):
            self.touch_down_pos = touch.pos
            anim = Animation(press_opacity=0.5, duration=ANIM_DURATION / 2)
            anim.start(self)
            return True
        return super().on_touch_down(touch)
    
    def on_touch_up(self, touch):
        """–û—Ç–ø—É—Å–∫–∞–Ω–∏–µ"""
        if hasattr(self, 'touch_down_pos') and self.collide_point(*touch.pos):
            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
            if self.on_close_callback:
                self.on_close_callback()
            
            anim = Animation(press_opacity=1.0, duration=ANIM_DURATION)
            anim.start(self)
            return True
        
        anim = Animation(press_opacity=1.0, duration=ANIM_DURATION)
        anim.start(self)
        return super().on_touch_up(touch)


# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨
# ============================================================================

class FeaturesPanel(FloatLayout):
    """–≠–∫—Ä–∞–Ω All Features"""
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    FEATURES = [
        ('translate', 'Translate'),
        ('correct', 'Correct'),
        ('emojify', 'Emojify'),
        ('expand', 'Expand'),
        ('reply', 'Reply'),
        ('dialog_goal', 'Dialog Goal'),
        ('compress', 'Compress'),
        ('paraphrase', 'Paraphrase'),
        ('format', 'Format'),
        ('scan', 'Scan'),
        ('tone', 'Tone'),
        ('settings', 'Settings'),
    ]
    
    def __init__(self, on_close=None, **kwargs):
        super().__init__(**kwargs)
        
        # Store close callback
        self.on_close_callback = on_close
        
        # –§–æ–Ω
        with self.canvas.before:
            Color(*COLOR_BG_DARK)
            self.bg_rect = RoundedRectangle(pos=self.pos, size=self.size)
        
        self.bind(pos=self.update_bg, size=self.update_bg)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = BoxLayout(
            orientation='vertical',
            padding=[PADDING_HORIZONTAL, PADDING_TOP, PADDING_HORIZONTAL, PADDING_BOTTOM],
            spacing=24
        )
        
        # –®–∞–ø–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
        header = BoxLayout(
            orientation='horizontal',
            size_hint=(1, None),
            height=40,
            spacing=16
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(
            text='All Features',
            font_size='28sp',
            bold=True,
            color=COLOR_TEXT_PRIMARY,
            size_hint=(1, 1)
        )
        header.add_widget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–±—ç–∫)
        close_btn = CloseButton(on_close=self.on_close_callback)
        header.add_widget(close_btn)
        
        main_layout.add_widget(header)
        
        # –°–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (3 –∫–æ–ª–æ–Ω–∫–∏)
        grid = GridLayout(
            cols=3,
            spacing=GRID_SPACING,
            size_hint=(1, 1),
            row_default_height=CHIP_HEIGHT,
            row_force_default=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for icon_name, label in self.FEATURES:
            chip = FeatureChip(
                icon_name=icon_name,
                label_text=label
            )
            grid.add_widget(chip)
        
        main_layout.add_widget(grid)
        
        self.add_widget(main_layout)
    
    def update_bg(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞"""
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size


# ============================================================================
# –î–ï–ú–û-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ============================================================================

class FeaturesApp(App):
    """–î–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ All Features"""
    
    def build(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ iPhone
        Window.size = (390, 844)
        Window.clearcolor = COLOR_BG_DARK
        
        return FeaturesPanel()


if __name__ == '__main__':
    FeaturesApp().run()

